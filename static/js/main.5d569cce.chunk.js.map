{"version":3,"sources":["components/company-item/index.js","components/company-item/company-item.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/company-service-context/company-service-context.js","components/hoc/index.js","components/hoc/with-company-service.js","components/spinner/index.js","components/spinner/spinner.js","actions/types-for-actions.js","actions/index.js","components/company-list/company-list.js","components/company-list/index.js","components/header/index.js","components/header/header.js","components/pages/home-page.js","components/pages/company-page.js","components/app/index.js","components/app/app.js","components/error-boundry/error-boundry.js","reducers/company-list.js","reducers/index.js","store.js","index.js","services/company-service.js"],"names":["CompanyItem","id","name","className","to","pathname","state","ErrorIndicator","error","message","React","createContext","CompanyServiceProvider","Provider","CompanyServiceConsumer","Consumer","withCompanyService","Wrapped","props","companyService","Spinner","typesCompanies","fetch_company_req","fetch_company_suc","fetch_company_fail","get_company_by_id","filter_company_by_name","save_company_list","delete_company","change_company","add_message","companyRequested","type","companyLoaded","newCompany","payload","companyError","fetch_courses_user_fail","addMessage","fetchCompaniesFromGitHub","dispatch","getCompaniesFromGitHub","then","dataCompanies","catch","err","CompanyList","companies","map","company","connect","companyList","searchText","loading","onRequsted","onLoaded","list","onError","onMessage","m","filteredCompanies","getAll","useIndexedDBStore","useEffect","length","Error","filter","toLowerCase","indexOf","Header","onFilterCompany","text","onFethCompanies","deleteAll","add","onChange","e","target","value","placeholder","onClick","console","i","window","alert","HomePage","currentCompany","getCompanyById","onDeleteCompany","deleteCompany","onChangeCompany","changeCompany","location","useLocation","history","useHistory","split","boxesBloc","count","boxes","Number","isNaN","sortArray","order","tmpSum","parseFloat","NaN","isDel","splice","href","email","push","App","path","component","CompanyPage","ErrorBoundry","hasError","errorInfo","this","setState","children","Component","updateCompanyList","action","undefined","fetch_courses_user_req","indexCompany","findIndex","slice","listChange","indexChange","array","companyId","reducer","store","createStore","a","fetch","res","ok","json","ReactDOM","render","config","databaseName","version","stores","keyPath","autoIncrement","indices","options","unique","document","getElementById"],"mappings":"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","file":"static/js/main.5d569cce.chunk.js","sourcesContent":["import CompanyItem from './company-item'\r\n\r\nexport default CompanyItem;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './company-item.scss';\r\n\r\nconst CompanyItem = ({ id, name }) => {\r\n    \r\n    return (\r\n        <div className='company-item'>\r\n            <Link to={{ pathname: `/spacex-cargo-planner/company/${id}`, state: { id: id } }}>{ name }</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompanyItem;","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\nimport './error-indicator.scss';\r\n\r\nconst ErrorIndicator = ({error}) => {\r\n    return (\r\n        <div className='error-indicator'>{error ? error.message : \"Error!\"}</div>        \r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\n\r\nconst {\r\n    Provider: CompanyServiceProvider,\r\n    Consumer: CompanyServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    CompanyServiceProvider,\r\n    CompanyServiceConsumer\r\n};\r\n","import withCompanyService from './with-company-service'\r\n\r\nexport default withCompanyService;","import React from 'react';\r\nimport { CompanyServiceConsumer } from '../company-service-context/';\r\n\r\nconst withCompanyService = () => (Wrapped) => {\r\n\r\n    return (props) => {        \r\n        return (\r\n            <CompanyServiceConsumer>\r\n            {\r\n                (companyService) => {\r\n                    return (<Wrapped {...props}\r\n                        companyService={companyService}/>);\r\n                }\r\n            }\r\n            </CompanyServiceConsumer>\r\n    );\r\n    }\r\n};\r\n\r\nexport default withCompanyService;","import Spinner from './spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return <p>loading...</p>;\r\n};\r\n\r\nexport default Spinner;","\r\nconst typesCompanies = {\r\n    fetch_company_req: 'FETCH_COMPANY_REQUEST',\r\n    fetch_company_suc: 'FETCH_COMPANY_SUCCESS',\r\n    fetch_company_fail: 'FETCH_COMPANY_FAILURE',\r\n    get_company_by_id: 'GET_COMPANY_BY_ID',\r\n    filter_company_by_name: 'FILTER_COMPANY_BY_NAME',\r\n    save_company_list: 'SAVE_COMPANY_LIST',\r\n    delete_company: 'DELETE_COMPANY',\r\n    change_company: 'CHANGE_COMPANY',\r\n    add_message: 'ADD_MESSAGE',\r\n};\r\n\r\nexport {\r\n    typesCompanies,\r\n};\r\n","import { typesCompanies } from './types-for-actions';\r\n\r\nconst companyRequested = () => {\r\n    return {\r\n        type: typesCompanies.fetch_company_req,\r\n    }\r\n};\r\n\r\nconst companyLoaded = (newCompany) => {\r\n    return {\r\n        type: typesCompanies.fetch_company_suc,\r\n        payload: newCompany\r\n    };\r\n};\r\n\r\nconst companyError = (error) => {\r\n    return {\r\n        type: typesCompanies.fetch_courses_user_fail,\r\n        payload: error\r\n    };\r\n};\r\n\r\nconst addMessage = (message) => {\r\n    return {\r\n        type: typesCompanies.add_message,\r\n        payload: message\r\n    };\r\n}\r\n\r\nconst deleteCompany = (company) => {\r\n    return {\r\n        type: typesCompanies.delete_company,\r\n        payload: company,\r\n    }\r\n}\r\n\r\nconst changeCompany = (company) => {\r\n    return {\r\n        type: typesCompanies.change_company,\r\n        payload: company,\r\n    }\r\n}\r\n\r\nconst getCompanyById = (id) => {\r\n    return {\r\n        type: typesCompanies.get_company_by_id,\r\n        payload: id,\r\n    }    \r\n}\r\n\r\nconst filterCompanyByName = (name) => {    \r\n    return {\r\n        type: typesCompanies.filter_company_by_name,\r\n        payload: name,\r\n    }    \r\n}\r\n\r\nconst fetchCompaniesFromGitHub = (companyService, dispatch) => () => {\r\n    dispatch(companyRequested());\r\n    companyService.getCompaniesFromGitHub()\r\n    .then((dataCompanies) => dispatch(companyLoaded(dataCompanies)))\r\n    .catch((err) => dispatch(companyError(err)));\r\n};\r\n\r\nexport {    \r\n    companyError,\r\n    companyLoaded,\r\n    companyRequested,\r\n    getCompanyById,\r\n    filterCompanyByName,\r\n    fetchCompaniesFromGitHub,    \r\n    deleteCompany,\r\n    changeCompany,\r\n    addMessage,\r\n};","import React, { useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport CompanyItem from \"../company-item\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\nimport withCompanyService from \"../hoc\";\r\nimport Spinner from '../spinner';\r\nimport { companyRequested, companyLoaded, companyError, addMessage } from '../../actions';\r\nimport { useIndexedDBStore } from \"use-indexeddb\";\r\n\r\nimport './company-list.scss';\r\n\r\nconst CompanyList = ({ companies }) => {\r\n\r\n    return (\r\n        <div className='company-list'>\r\n            <ul className='company-list__items'>\r\n                {companies.map((company) => {\r\n                    return (\r\n                        <li className='company-list__item' key={company.id}>\r\n                            <CompanyItem id={ company.id }name={company.name} />\r\n                        </li>\r\n                    )\r\n                })                \r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CompanyListContainer = ({ companies, searchText, onMessage, onRequsted, onLoaded, onError, loading, error } ) => {\r\n    \r\n    const { getAll } = useIndexedDBStore(\"companyList\");\r\n\r\n    useEffect(() => {\r\n        onRequsted();\r\n        getAll().then((dataCompanies) => {\r\n            onLoaded(dataCompanies);\r\n            if (!dataCompanies.length) {\r\n                onMessage('There is no data about the companies in the local repository. Please download them from the internet.');\r\n            } else {\r\n                onMessage('You are working with a locally saved list of companies.');\r\n            }\r\n        }).catch((err) => onError(new Error('There is no data about the companies in the local repository. Please download them from the internet.')));        \r\n    }, []);\r\n\r\n    if (!companies) return;\r\n\r\n    if (!companies.length) {\r\n        //onMessage('There is no data about the companies in the local repository. Please download them from the internet.');\r\n    }\r\n    \r\n    if (loading) return <Spinner />;\r\n\r\n    if (error) return <ErrorIndicator error={ error }/>;\r\n\r\n    let filteredCompanies;\r\n    if (searchText !== \"\" && searchText !== null) {\r\n    \r\n    filteredCompanies = companies.filter((company) => {\r\n        return company.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\r\n    });\r\n    } else filteredCompanies = companies;\r\n    \r\n    return (\r\n        <CompanyList companies={ filteredCompanies }/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ companyList: { companies, searchText, loading, error } }) => {\r\n    return { companies, searchText, loading, error}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRequsted: () => dispatch(companyRequested()),\r\n        onLoaded: (list) => dispatch(companyLoaded(list)),\r\n        onError: () => dispatch(companyError()),\r\n        onMessage: (m) => dispatch(addMessage(m)),\r\n    }\r\n}\r\n\r\nexport default withCompanyService()(connect(mapStateToProps, mapDispatchToProps)(CompanyListContainer));\r\n","import CompanyList from \"./company-list\";\r\n\r\nexport default CompanyList;","import Header from \"./header\";\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { filterCompanyByName } from '../../actions/';\r\nimport withCompanyService from \"../hoc\";\r\nimport { fetchCompaniesFromGitHub, addMessage } from '../../actions';\r\nimport { useIndexedDBStore } from \"use-indexeddb\";\r\n\r\nimport './header.scss';\r\n\r\nconst Header = ({ companies, onFilterCompany, onFethCompanies, message, onMessage }) => {\r\n\r\n    const { deleteAll } = useIndexedDBStore(\"companyList\");\r\n    const { add } = useIndexedDBStore(\"companyList\");\r\n\r\n    const saveCompanies = () => {\r\n        deleteAll().then().catch(console.error);\r\n        for (let i = 0; i < companies.length; i++) {\r\n            add(companies[i]).then().catch(console.error);\r\n        }\r\n        onMessage('You are working with a locally saved list of companies.');\r\n        window.alert('List saved');\r\n    }\r\n    \r\n    return (\r\n        <div className='header'>\r\n            <div className='header__logo'>\r\n                <Link to='/'>Cargo Planner</Link>                \r\n            </div>\r\n            <div className='header__search'>\r\n                <input\r\n                    //value={ searchText ? searchText : '' }\r\n                    onChange={(e) => onFilterCompany(e.target.value)}\r\n                    placeholder='Search' />\r\n            </div>\r\n            <div className='header__actions'>\r\n                <button\r\n                    onClick={() => {\r\n                        onFethCompanies();\r\n                        onMessage('You are working with a list of companies downloaded from the internet. To save the changes, click the save button.');\r\n                        }\r\n                    }\r\n                >Load</button>\r\n                <button\r\n                    onClick={saveCompanies}\r\n                >Save</button>\r\n            </div>\r\n            <div className='header__message'>{ message }</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ companyList: { companies, message } }) => {\r\n    return {companies, message}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, { companyService }) => {\r\n    return {\r\n        onFilterCompany: (text) => dispatch(filterCompanyByName(text)),\r\n        onFethCompanies: fetchCompaniesFromGitHub(companyService, dispatch),\r\n        onMessage: (m) => dispatch(addMessage(m)),\r\n    }\r\n}\r\n\r\nexport default withCompanyService()(connect(mapStateToProps, mapDispatchToProps)(Header));","import React from \"react\";\r\n\r\nimport './home-page.scss';\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className='home-page'>\r\n            <h1>SpaceX Cargo Planner</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React, {useEffect} from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { getCompanyById, deleteCompany, changeCompany } from '../../actions'\r\nimport ErrorIndicator from '../error-indicator';\r\nimport sortArray from 'sort-array';\r\n\r\nimport './company-page.scss'\r\n\r\nconst CompanyPage = ({ currentCompany, getCompanyById, onDeleteCompany, onChangeCompany }) => {\r\n    \r\n    let location = useLocation()\r\n    let history = useHistory();\r\n    let message = '';    \r\n\r\n    let id;\r\n    if (!location.state) {\r\n        id = location.pathname.split(\"/\")[2];\r\n    } else {\r\n        id = location.state.id;\r\n    }\r\n    useEffect(() => {\r\n        getCompanyById(id);\r\n    }, [id,currentCompany]);    \r\n\r\n    let count = 0;\r\n    \r\n    if (currentCompany)\r\n        if (currentCompany.boxes) {\r\n            const boxes = currentCompany.boxes.split(',').map(Number);\r\n            \r\n            for (let i = 0; i < boxes.length; i++) { \r\n                if (isNaN(boxes[i])) {\r\n                    message = 'Data is incorrect!';\r\n                    break;\r\n                }\r\n                if (boxes[i] > 10) {\r\n                    message = 'Each Starship cargo bay can hold up to 10 units.';\r\n                    break;\r\n                }\r\n            }\r\n\r\n            sortArray(boxes, { order: 'desc' });\r\n                \r\n            while (boxes.length > 0) {\r\n                let tmpSum = parseFloat(boxes[0]);\r\n                if (isNaN(tmpSum)) {\r\n                    count = NaN;\r\n                    break;\r\n                }\r\n                let isDel = false;\r\n                for (let i = 1; i < boxes.length; i++) {\r\n                    if (tmpSum + parseFloat(boxes[i]) <= 10) {\r\n                        tmpSum += parseFloat(boxes[i]);\r\n                    } else {\r\n                        isDel = true;\r\n                        boxes.splice(0, i);\r\n                        break;\r\n                    }\r\n                }\r\n                count++;\r\n                if (!isDel && tmpSum <= 10) break;\r\n                if (count > 20) break;             \r\n            }                        \r\n        }\r\n\r\n    if (!currentCompany) return (\r\n        <div className='company-page'>\r\n            <ErrorIndicator error={new Error('Company not found. Choose another company.')} />\r\n        </div>\r\n    )\r\n    \r\n    let boxesBloc;\r\n    if (currentCompany.boxes) {\r\n        boxesBloc = (\r\n            <div className='company-page__result'>\r\n                <p>Number of required cargo boys: <span>{\r\n                        message ? '-' : count\r\n                    }\r\n                    </span></p>\r\n                <div className='company-page__boxes'>\r\n                    <p>Corgo boxes</p>\r\n                    <input                    \r\n                        value={currentCompany.boxes}\r\n                        onChange={(e) => {\r\n                            onChangeCompany({\r\n                                ...currentCompany,\r\n                                boxes: e.target.value,\r\n                            })\r\n                        }}\r\n                        placeholder='Enter cargo boxes' />                    \r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        boxesBloc = (\r\n            <div className='company-page__result'>\r\n                <p>There is nothing to shipment!</p>\r\n            </div>)\r\n    }   \r\n    \r\n    return (\r\n        <div className='company-page'>\r\n            <h1 className='company-page__title'>{currentCompany.name}</h1>\r\n            <div className='company-page__email'>\r\n                <a href={`mailto:${currentCompany.email}`}>{currentCompany.email}</a>\r\n            </div>\r\n            {boxesBloc}\r\n            <div className='company-page__button'>\r\n                <button\r\n                    onClick={() => {\r\n                        onDeleteCompany(currentCompany);\r\n                        history.push('/spacex-cargo-planner/');\r\n                    }}>Delete Company</button>\r\n                {\r\n                    message ? \r\n                <ErrorIndicator error={new Error(message)} /> : ''\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ companyList: { currentCompany } }) => {\r\n    return {currentCompany}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCompanyById: (id) => dispatch(getCompanyById(id)),\r\n        onDeleteCompany: (company) => dispatch(deleteCompany(company)),\r\n        onChangeCompany: (company) => dispatch(changeCompany(company)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CompanyPage);","import App from './app'\r\n\r\nexport default App;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport CompanyList from '../company-list';\r\nimport Header from '../header';\r\n\r\nimport { HomePage, CompanyPage } from '../pages';\r\n\r\nimport './app.scss'\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className='app__wrapper'>\r\n            <div className='app__header'>\r\n                <Header/>\r\n            </div>\r\n            <div className='app__company-list'>\r\n                <CompanyList/>\r\n            </div>\r\n            <div className='app__page'>\r\n                <Switch>\r\n                    <Route\r\n                        path='/spacex-cargo-planner/company'\r\n                        component={CompanyPage}                        \r\n                    />\r\n                    <Route\r\n                        path='/spacex-cargo-planner'\r\n                        component={HomePage}\r\n                        \r\n                    />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator />;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}","import { typesCompanies } from '../actions/types-for-actions';\r\n\r\nconst updateCompanyList = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            companies: [],\r\n            currentCompany: null,\r\n            searchText: '',\r\n            loading: true,\r\n            error: null,\r\n            message: 'You are working with a locally saved list of companies.',\r\n        };\r\n    }\r\n\r\n\r\n    switch (action.type) {\r\n        case typesCompanies.fetch_courses_user_req:\r\n            return {\r\n                companies: [],\r\n                currentCompany: null,\r\n                searchText: '',\r\n                loading: true,\r\n                error: null,\r\n                message: state.companyList.message,\r\n            };\r\n\r\n        case typesCompanies.fetch_company_suc:\r\n            return {\r\n                companies: action.payload,\r\n                currentCompany: null,\r\n                searchText: '',\r\n                loading: false,\r\n                error: null,\r\n                message: state.companyList.message,\r\n            };\r\n\r\n        case typesCompanies.fetch_courses_user_fail:\r\n            return {\r\n                companies: [],\r\n                currentCompany: null,\r\n                searchText: '',\r\n                loading: false,\r\n                error: action.payload,\r\n                message: state.companyList.message,\r\n            };\r\n        case typesCompanies.add_message:\r\n            return {\r\n                companies: state.companyList.companies,\r\n                currentCompany: state.companyList.currentCompany,\r\n                searchText: '',\r\n                loading: false,\r\n                error: null,\r\n                message: action.payload,\r\n            };\r\n        case typesCompanies.delete_company:\r\n            const list = state.companyList.companies;\r\n            const indexCompany = list.findIndex(({id}) => id === action.payload.id);\r\n            return {\r\n                companies: [...list.slice(0, indexCompany), ...list.slice(indexCompany + 1)],\r\n                currentCompany: null,\r\n                searchText: '',\r\n                loading: false,\r\n                error: null,\r\n                message: state.companyList.message,\r\n            }\r\n        case typesCompanies.change_company:\r\n            const listChange = state.companyList.companies;\r\n            const indexChange = listChange.findIndex(({ id }) => id === action.payload.id);\r\n            return {\r\n                companies: [...listChange.slice(0, indexChange), action.payload, ...listChange.slice(indexChange + 1)],\r\n                currentCompany: action.payload,\r\n                searchText: '',\r\n                loading: false,\r\n                error: null,\r\n                message: state.companyList.message,\r\n            }\r\n        case typesCompanies.get_company_by_id:\r\n            const array = [ ...state.companyList.companies ];\r\n            const companyId = array.filter((company) => {\r\n                return company.id === action.payload\r\n            });\r\n            return {\r\n                companies: array,\r\n                currentCompany: companyId ? companyId[0] : null,\r\n                searchText: state.companyList.searchText,\r\n                loading: false,\r\n                error: null,\r\n                message: state.companyList.message,\r\n            }\r\n        case typesCompanies.filter_company_by_name:\r\n            return {\r\n                companies: state.companyList.companies,\r\n                currentCompany: state.companyList.currentCompany,\r\n                searchText: action.payload,\r\n                loading: false,\r\n                error: null,\r\n                message: state.companyList.message,\r\n            }\r\n        default:\r\n            return state.companyList;\r\n    }\r\n};\r\n\r\nexport default updateCompanyList;","import updateCompanyList from './company-list';\r\n\r\nconst reducer = (state, action) => {\r\n    return {\r\n        companyList: updateCompanyList(state, action),   \r\n    };\r\n};\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\n\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport App from './components/app';\r\nimport ErrorBoundry from './components/error-boundry/error-boundry';\r\nimport CompanyService from './services/company-service';\r\nimport { CompanyServiceProvider } from './components/company-service-context';\r\nimport IndexedDBProvider from \"use-indexeddb\";\r\n\r\nimport './scss/index.scss';\r\n\r\nimport store from './store';\r\n\r\nconst idbConfig = {\r\n  databaseName: \"Company-DB\",\r\n  version: 1,\r\n  stores: [\r\n    {\r\n      name: \"companyList\",\r\n      id: { keyPath: \"id\", autoIncrement: true },\r\n      indices: [\r\n        { name: \"id\", keyPath: \"id\", options: { unique: false } },\r\n        { name: \"name\", keyPath: \"name\" },\r\n        { name: \"email\", keyPath: \"email\" },\r\n        { name: \"boxes\", keyPath: \"boxes\" },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nconst companyService = new CompanyService();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ErrorBoundry>\r\n      <CompanyServiceProvider value={companyService}>\r\n        <Router>\r\n          <IndexedDBProvider config={idbConfig}>\r\n            <App />\r\n          </IndexedDBProvider>\r\n        </Router>\r\n      </CompanyServiceProvider>\r\n    </ErrorBoundry>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);","export default class CompanyService {\r\n\r\n  getCompaniesFromGitHub = async () => {    \r\n    const res = await fetch(`https://raw.githubusercontent.com/sashakever/spacex-cargo-planner/main/src/services/shipments.json`);\r\n\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch data!`)\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n}"],"sourceRoot":""}